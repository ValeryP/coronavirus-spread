{"version":3,"sources":["Chart.tsx","App.tsx","index.tsx"],"names":["Chart","labelsPlot","dataExistingPlot","dataPredictedPlot","country","color","commonLineStyle","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBackgroundColor","fill","lineTension","borderCapStyle","borderDashOffset","borderJoinStyle","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointHitRadius","pastLineStyle","borderDash","pointRadius","predictionLineStyle","data","labels","datasets","label","width","height","legend","octokit","Octokit","require","useStyles","makeStyles","theme","createStyles","root","marginLeft","margin","spacing","textAlign","formControl","minWidth","footer","opacity","latestUpdate","chart","infoIcon","palette","grey","A200","marginTop","App","classes","types","daysMapping","useCookies","cookies","setCookie","useState","setLabels","setCountry","dataType","setDataType","countries","setCountries","days","setDays","setData","lastUpdate","setLastUpdate","inputCountryLabel","React","useRef","labelCountryWidth","setLabelCountryWidth","inputDaysLabel","labelDaysWidth","setLabelDaysWidth","inputDataTypeLabel","labelDataTypeWidth","setLabelDataTypeWidth","useEffect","current","offsetWidth","handleCountryChange","event","newCountry","target","value","ReactGA","category","action","path","handleDaysChange","newRange","_","findKey","handleDataTypeChange","newType","Papa","parse","skipEmptyLines","header","download","delimiter","complete","results","map","slice","keys","strDate","moment","add","toDate","concat","sortBy","row","length","repos","listCommits","owner","repo","then","x","latestCommitTime","values","fromNow","Grid","container","direction","justify","alignItems","className","item","FormControl","variant","InputLabel","ref","id","Select","labelId","onChange","labelWidth","index","MenuItem","key","nextDayPrediction","allDays","currentDate","indexOf","format","lastPart","mults","reduce","acc","i","previousValue","isNaN","remove","filter","avgMult","mean","range","v","Math","round","last","zipLabelsWithValues","dateLabels","zipObject","buildPrediction","labelsNormalized","existingData","predictionAcc","take","date","nextDayPredicted","findIndex","undefined","startingDay","Date","now","buildNextDaysLabels","dataPerCountry","countryToCheck","casesSelection","String","sum","Number","find","isComplexRegion","region","split","state","getCasesPerCountry","prediction","indexOfFirstPacient","accuracy","deviationsAll","zipWith","existing","predicted","biggerVal","max","smallerVal","min","abs","rangeStart","deviations","calculateAccuracy","predictionTomorrow","findLast","Typography","ReactHtmlParser","lowerCase","Tooltip","title","arrow","TransitionComponent","Fade","buildChart","OutboundLink","eventLabel","to","initialize","pageview","window","location","pathname","createMuiTheme","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.949971f2.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nexport default function Chart({labelsPlot, dataExistingPlot, dataPredictedPlot, country, color}: { labelsPlot: string[], dataExistingPlot: number[], dataPredictedPlot: number[], country: string, color: string }) {\n    const commonLineStyle = {\n        backgroundColor: color + 'AA',\n        borderColor: color,\n        pointBorderColor: color,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: color + '33',\n        pointBackgroundColor: '#fff',\n        fill: false,\n        lineTension: 0.1,\n        borderCapStyle: 'butt',\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderWidth: 1,\n        pointHoverRadius: 10,\n        pointHoverBorderWidth: 2,\n        pointHitRadius: 10\n    };\n    const pastLineStyle = {...commonLineStyle, borderDash: [], pointRadius: 3};\n    const predictionLineStyle = {\n        ...commonLineStyle,\n        borderDash: [5, 2],\n        pointRadius: 2,\n        backgroundColor: '#000AA',\n        borderColor: '#2196f3',\n        pointHoverRadius: 5,\n        pointBorderColor: '#2196f3',\n        pointHoverBackgroundColor: '#2196f3',\n        pointHoverBorderColor: '#00033'\n    };\n\n    return <Line data={{\n        labels: labelsPlot,\n        datasets: [\n            {...pastLineStyle, label: country, data: dataExistingPlot},\n            {...predictionLineStyle, label: country + ' (predicted)', data: dataPredictedPlot}\n        ]\n    }} width={100} height={45} legend={null}/>;\n}","import React, {useEffect, useState} from 'react';\nimport Papa from 'papaparse';\nimport Chart from \"./Chart\";\nimport {\n    Fade,\n    FormControl,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Select,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport _, {Dictionary} from \"lodash\";\nimport ReactGA from 'react-ga';\nimport moment from \"moment\";\nimport {useCookies} from \"react-cookie\";\nimport InfoRoundedIcon from '@material-ui/icons/InfoRounded';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst {Octokit} = require(\"@octokit/rest\");\nconst octokit = new Octokit();\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginLeft: 0,\n            margin: theme.spacing(2),\n            textAlign: 'center'\n        },\n        formControl: {\n            margin: theme.spacing(2),\n            minWidth: 100,\n        },\n        footer: {\n            opacity: 0.5\n        },\n        latestUpdate: {\n            opacity: 0.5\n        },\n        chart: {\n            width: '90%'\n        },\n        infoIcon: {\n            color: theme.palette.grey.A200,\n            height: theme.spacing(2),\n            width: theme.spacing(2),\n            marginTop: 4,\n            marginLeft: 2\n        },\n    }),\n);\n\nfunction App() {\n    const classes = useStyles();\n    const baseUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-\";\n    const types = {\n        'Confirmed': '#f57c00',\n        'Deaths': '#FC562E',\n        'Recovered': '#388e3c'\n    };\n    const daysMapping = {\n        'Tomorrow': 1,\n        '2 days': 2,\n        '3 days': 3,\n        '1 week': 7\n    }\n    const [cookies, setCookie] = useCookies(['saved-prefs']);\n\n    const [labels, setLabels] = useState([] as Date[]);\n    const [country, setCountry] = useState(cookies['country'] || 'Worldwide');\n    const [dataType, setDataType] = useState(cookies['type'] || 'Confirmed');\n    const [countries, setCountries] = useState([] as string[]);\n    const [days, setDays] = useState(cookies['prediction'] || 1);\n    const [data, setData] = useState([] as any[]);\n    const [lastUpdate, setLastUpdate] = useState('');\n\n    const inputCountryLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelCountryWidth, setLabelCountryWidth] = React.useState(0);\n    const inputDaysLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelDaysWidth, setLabelDaysWidth] = React.useState(0);\n    const inputDataTypeLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelDataTypeWidth, setLabelDataTypeWidth] = React.useState(0);\n\n    React.useEffect(() => {\n        setLabelCountryWidth(inputCountryLabel.current!.offsetWidth);\n        setLabelDaysWidth(inputDaysLabel.current!.offsetWidth);\n        setLabelDataTypeWidth(inputDataTypeLabel.current!.offsetWidth);\n    }, []);\n\n    const handleCountryChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        let newCountry = event.target.value as string;\n        ReactGA.event({\n            category: 'Select',\n            action: 'Country',\n            label: newCountry\n        });\n        setCookie('country', newCountry, {path: '/'});\n        setCountry(newCountry);\n    };\n\n    const handleDaysChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        let newRange = event.target.value as number;\n        ReactGA.event({\n            category: 'Select',\n            action: 'Range',\n            label: _.findKey(newRange)\n        });\n        setCookie('prediction', newRange, {path: '/'});\n        setDays(newRange);\n    };\n\n    const handleDataTypeChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        let newType = event.target.value as string;\n        ReactGA.event({\n            category: 'Select',\n            action: 'Type',\n            label: newType\n        });\n        setCookie('type', newType, {path: '/'});\n        setDataType(newType);\n    };\n\n    const loadData = () => {\n        Papa.parse(baseUrl + dataType + '.csv', {\n            skipEmptyLines: true, header: true, download: true, delimiter: ',',\n            complete: function (results) {\n                let data = results.data;\n                let labels = _.map(_.slice(_.keys(data[0]), 4), (strDate) => moment(strDate).add(1, 'days').toDate())\n                let countries = _.concat(['Worldwide'], _.sortBy(data.map(row => row['Province/State'].length > 0 ? `${row['Country/Region']}/${row['Province/State']}` : row['Country/Region'])));\n                setCountries(countries)\n                setLabels(labels)\n                setData(data)\n            }\n        });\n    }\n\n    const loadLastUpdateTime = () => {\n        octokit.repos.listCommits({\n            owner: 'CSSEGISandData',\n            repo: 'COVID-19'\n        }).then((x: any) => {\n            const latestCommitTime = _.values(x['data'])[0]['commit']['committer']['date']\n            setLastUpdate(moment(latestCommitTime).fromNow());\n        });\n    }\n\n    useEffect(loadData, [dataType]);\n    useEffect(loadLastUpdateTime, []);\n\n    function buildTypeSelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputDataTypeLabel}\n                            id=\"select-type-input-id\">Type</InputLabel>\n                <Select\n                    labelId=\"select-type-select-label\"\n                    id=\"select-type-select-id\"\n                    value={dataType}\n                    onChange={handleDataTypeChange}\n                    labelWidth={labelDataTypeWidth}\n                >\n                    {\n                        _.map(_.keys(types), (value, index) => <MenuItem key={index}\n                                                                         value={value}>{value}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildCountrySelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputCountryLabel}\n                            id=\"select-country-input-id\">Location</InputLabel>\n                <Select\n                    labelId=\"select-country-select-label\"\n                    id=\"select-country-select-id\"\n                    value={country}\n                    onChange={handleCountryChange}\n                    labelWidth={labelCountryWidth}\n                >\n                    {\n                        countries.map((country, index) =>\n                            <MenuItem key={index} value={country}>{country}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildDaysSelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputDaysLabel}\n                            id=\"select-days-input-id\">Prediction</InputLabel>\n                <Select\n                    labelId=\"select-days-select-label\"\n                    id=\"select-days-select-id\"\n                    value={days}\n                    onChange={handleDaysChange}\n                    labelWidth={labelDaysWidth}\n                >\n                    {\n                        _.map(daysMapping, (values, key) => <MenuItem key={values}\n                                                                      value={values}>{key}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildChart() {\n        function getCasesPerCountry(countryToCheck: string): string[] {\n            if (countryToCheck === 'Worldwide') {\n                let casesSelection = _.map(data, x => _.slice(_.values(x), 4) as string[]);\n                return _.filter(_.reduce(casesSelection, (acc, value, index) => {\n                    acc[index] = String(_.sum(_.map(casesSelection, (row => Number(row[index])))));\n                    return acc\n                }, [] as string[]), (value) => Number(value) > 0);\n            } else {\n                return _.slice(_.values(_.find(data, row => {\n                    let isComplexRegion = _.indexOf(countryToCheck, '/') !== -1;\n                    const region = isComplexRegion ? _.split(countryToCheck, '/')[0] : countryToCheck\n                    const state = isComplexRegion ? _.split(countryToCheck, '/')[1] : \"\"\n                    return row['Country/Region'] === region && row['Province/State'] === state\n                })), 4) as string[];\n            }\n        }\n\n        function buildNextDaysLabels(startingDay: Date, days: number): Date[] {\n            return _.reduce(_.range(1, +days + +1), (acc, v, i) => {\n                acc[i] = moment(startingDay || Date.now()).add(i + 1, \"days\").toDate();\n                return acc\n            }, [] as Date[]);\n        }\n\n        function nextDayPrediction(allDays: Dictionary<number>, currentDate: Date) {\n            const predictionSampleSize = 3;\n            const index = _.indexOf(_.keys(allDays), moment(currentDate).format('l'))\n            const lastPart = _.slice(_.values(allDays), index - predictionSampleSize, index + 1);\n            const mults = _.reduce(lastPart, (acc, value, i) => {\n                let previousValue = lastPart[i - 1];\n                if (i > 0 && previousValue > 0 && !isNaN(value) && !isNaN(previousValue)) {\n                    acc[i - 1] = value / previousValue\n                }\n                return acc\n            }, [] as number[])\n            let remove = _.filter(mults, x => !_.isNaN(x));\n            const avgMult = _.mean(remove) || 1\n            return _.reduce(_.range(1, 2), (acc, v, i) => {\n                acc[i] = Math.round(_.reduce(_.range(0, v), (acc) => acc * avgMult, 1) * (_.last(lastPart) || 0));\n                return acc\n            }, [] as number[])[0];\n        }\n\n        function onlyValidNumbers(values: number[]) {\n            return _.filter(values, (v) => v !== undefined);\n        }\n\n        function zipLabelsWithValues(dateLabels: Date[], values: number[]): Dictionary<number> {\n            return _.zipObject(dateLabels.map(x => moment(x).format('l')), values);\n        }\n\n        function buildPrediction(labelsNormalized: Date[], existingData: Dictionary<number>, range: number) {\n            let oneDayPrediction = _.concat([0], _.take(_.map(labelsNormalized, (date: Date) => nextDayPrediction(existingData, date)), _.values(existingData).length));\n            let predictionAcc = zipLabelsWithValues(labelsNormalized, oneDayPrediction);\n            for (let i = 1; i < range; i++) {\n                const targetDay = labelsNormalized[_.findIndex(_.values(predictionAcc), v => v === undefined) - 1]\n                const nextDayPredicted = nextDayPrediction(predictionAcc, targetDay)\n                const newPredictionSerie = _.concat(onlyValidNumbers(_.values(predictionAcc)), [nextDayPredicted]);\n                predictionAcc = zipLabelsWithValues(labelsNormalized, newPredictionSerie)\n            }\n            return _.values(predictionAcc);\n        }\n\n        function calculateAccuracy(dataExistingPlot: number[], dataPredictedPlot: number[], days: number) {\n            function mismatchPercentage(existing: number, predicted: number) {\n                if (existing === predicted) {\n                    return 0;\n                } else if (existing === 0 || predicted === 0) {\n                    return (existing + predicted) * 100\n                } else {\n                    const biggerVal = _.max([existing, predicted])!;\n                    const smallerVal = _.min([existing, predicted])!;\n                    return Math.abs(1 - biggerVal / smallerVal) * 100;\n                }\n            }\n\n            const deviationAgeDays = 7;\n            const deviationsAll = _.zipWith(dataExistingPlot, dataPredictedPlot, mismatchPercentage);\n            const rangeStart = deviationsAll.length - days - deviationAgeDays < 0 ? 0 : deviationsAll.length - days - deviationAgeDays;\n            const deviations = _.slice(deviationsAll, rangeStart, rangeStart + deviationAgeDays).filter(x => !isNaN(x));\n            return _.round(100 - _.mean(deviations), 1);\n        }\n\n        const labelsNormalized = _.concat(labels, buildNextDaysLabels(_.last(labels)!, days));\n        const dataPerCountry = getCasesPerCountry(country).map(Number);\n        const existingData = zipLabelsWithValues(labels, dataPerCountry);\n        const prediction = buildPrediction(labelsNormalized, existingData, days)\n        let indexOfFirstPacient = _.findIndex(_.values(existingData), (x) => x > 0) - 1\n        indexOfFirstPacient = indexOfFirstPacient < 0 ? 0 : indexOfFirstPacient\n        let dataExistingPlot = _.values(existingData).slice(indexOfFirstPacient);\n        let dataPredictedPlot = _.values(prediction).slice(indexOfFirstPacient);\n        let labelsPlot = labelsNormalized.slice(indexOfFirstPacient).map(date => moment(date).format('ll'));\n        const accuracy = calculateAccuracy(dataExistingPlot, dataPredictedPlot, days);\n        const predictionTomorrow = _.findLast(buildPrediction(labelsNormalized, existingData, 1), (x) => x !== undefined);\n        // @ts-ignore\n        const color = types[dataType];\n        const titleTooltip = \"The accuracy calculation is based on a comparison of the last 7 days prediction and actual values of those days\"\n        return data.length\n            ? (\n                <>\n                    <Grid item>\n                        <Grid item container direction=\"row\" justify=\"center\"\n                              alignItems=\"center\">\n                            <Grid item>\n                                <Typography variant={\"caption\"}>\n                                    {ReactHtmlParser(`There is <strong>${accuracy}%</strong> chance to have <strong>${predictionTomorrow}</strong> ${_.lowerCase(dataType)} tomorrow (${country})`)}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={titleTooltip} arrow TransitionComponent={Fade}>\n                                    <InfoRoundedIcon className={classes.infoIcon}/>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Chart labelsPlot={labelsPlot} dataExistingPlot={dataExistingPlot}\n                               dataPredictedPlot={dataPredictedPlot} country={country}\n                               color={color}/>\n                    </Grid>\n                </>\n            )\n            : '';\n    }\n\n    function getFooter() {\n        return <Typography variant={\"caption\"}>\n            <ReactGA.OutboundLink\n                eventLabel=\"Data source\" target=\"_blank\"\n                to=\"https://github.com/CSSEGISandData/COVID-19\">\n                Data source\n            </ReactGA.OutboundLink>\n            {' | '}\n            <ReactGA.OutboundLink\n                eventLabel=\"Feedback\" target=\"_blank\"\n                to=\"https://t.me/coronavirus_spread\">\n                Feedback\n            </ReactGA.OutboundLink>\n            {' | '}\n            <ReactGA.OutboundLink\n                eventLabel=\"Github\" target=\"_blank\"\n                to=\"https://github.com/ValeryP/coronavirus-spread\">\n                Github\n            </ReactGA.OutboundLink>\n        </Typography>;\n    }\n\n    function buildLastUpdateLabel() {\n        return <Typography variant={\"caption\"}>{`Latest update ${lastUpdate}`}</Typography>;\n    }\n\n    return (\n        <Grid\n            container direction=\"column\" justify=\"center\" alignItems=\"center\"\n            className={classes.root}>\n            <Grid item>\n                {buildTypeSelect()}\n                {buildCountrySelect()}\n                {buildDaysSelect()}\n            </Grid>\n            <Grid item container direction=\"column\" className={classes.chart}>\n                {buildChart()}\n            </Grid>\n            <Grid item className={classes.footer}>{getFooter()}</Grid>\n            {lastUpdate &&\n            <Grid item className={classes.latestUpdate}>{buildLastUpdateLabel()}</Grid>}\n        </Grid>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\n\nReactGA.initialize(\"UA-160685541-1\");\nReactGA.pageview(window.location.pathname);\n\nconst theme = createMuiTheme();\nReactDOM.render(<ThemeProvider theme={theme}><App/></ThemeProvider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}