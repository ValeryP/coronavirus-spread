{"version":3,"sources":["Chart.tsx","App.tsx","index.tsx"],"names":["Chart","labels","dataPerCountry","country","days","color","monthShortNames","commonLineStyle","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBackgroundColor","fill","lineTension","borderCapStyle","borderDashOffset","borderJoinStyle","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointHitRadius","pastLineStyle","borderDash","pointRadius","predictionLineStyle","dateFormat","d","Date","getDate","getMonth","getFullYear","buildPrediction","latestDaysNumber","latestDaysCasesNonZero","_","slice","length","filter","x","normailizeLatestDaysNumber","latestDaysCases","map","Number","mults","v","i","multsLatestDays","avgMult","reduce","a","b","range","acc","Math","round","last","data","prediction","predictionLabest","latestDate","now","setDate","toISOString","buildNextDaysLabels","existingData","concat","NaN","predictedData","labelsNormalized","indexOfFirstPacient","findIndex","datasets","label","buildData","width","height","legend","useStyles","makeStyles","theme","createStyles","root","marginLeft","margin","spacing","textAlign","formControl","minWidth","footer","marginTop","chart","App","classes","types","daysMapping","useState","setLabels","setCountry","dataType","setDataType","countries","setCountries","setDays","setData","inputCountryLabel","React","useRef","labelCountryWidth","setLabelCountryWidth","inputDaysLabel","labelDaysWidth","setLabelDaysWidth","inputDataTypeLabel","labelDataTypeWidth","setLabelDataTypeWidth","useEffect","current","offsetWidth","handleCountryChange","event","target","value","handleDaysChange","handleDataTypeChange","Papa","parse","skipEmptyLines","header","download","delimiter","complete","results","keys","row","processLoadedData","listOfCountries","sortBy","Grid","container","direction","justify","alignItems","className","item","FormControl","variant","InputLabel","ref","id","Select","labelId","onChange","labelWidth","index","MenuItem","key","values","countryToCheck","find","isComplexRegion","indexOf","region","split","state","buildChart","Typography","Link","href","ReactGA","initialize","createMuiTheme","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c62f909f.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport _ from \"lodash\";\n\nexport default function Chart({labels, dataPerCountry, country, days, color}: { labels: string[], dataPerCountry: string[], country: string, days: number, color: string }) {\n    const monthShortNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    const commonLineStyle = {\n        backgroundColor: color + 'AA',\n        borderColor: color,\n        pointBorderColor: color,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: color + '33',\n        pointBackgroundColor: '#fff',\n        fill: false,\n        lineTension: 0.1,\n        borderCapStyle: 'butt',\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderWidth: 1,\n        pointHoverRadius: 10,\n        pointHoverBorderWidth: 2,\n        pointHitRadius: 10\n    };\n    const pastLineStyle = {...commonLineStyle, borderDash: [], pointRadius: 3};\n    const predictionLineStyle = {...commonLineStyle, borderDash: [5, 5], pointRadius: 5};\n\n    function dateFormat(d: string) {\n        return new Date(d).getDate() + ' ' + monthShortNames[new Date(d).getMonth()] + ', ' + new Date(d).getFullYear();\n    }\n\n    function normailizeLatestDaysNumber(latestDaysNumber: number) {\n        let latestDaysCases = _.slice(dataPerCountry, dataPerCountry.length - latestDaysNumber - 1);\n        const latestDaysCasesNonZero = latestDaysCases.filter(x => x !== \"0\").length\n        return latestDaysCasesNonZero < latestDaysNumber ? latestDaysCasesNonZero - 1 : latestDaysNumber;\n    }\n\n    function buildPrediction() {\n        const predictionSample = 3;\n        const latestDaysNumber = normailizeLatestDaysNumber(predictionSample)\n        const latestDaysCases = _.slice(dataPerCountry, dataPerCountry.length - latestDaysNumber - 1).map(x => Number(x));\n        const latestDaysDelta = latestDaysCases.map((v, i) => i === 0 ? 0 : v - latestDaysCases[i - 1])\n        const mults = latestDaysDelta.map(((v, i) => 1 + v / latestDaysCases[i]))\n        const multsLatestDays = _.slice(mults, mults.length - latestDaysNumber);\n        const avgMult = (multsLatestDays.reduce((a, b) => a + b, 0) / multsLatestDays.length) || 0;\n        return _.reduce(_.range(1, days + 1), (acc, v, i) => {\n            acc[i] = Math.round(_.reduce(_.range(0, v), (acc) => acc * avgMult, 1) * (_.last(latestDaysCases) || 0));\n            return acc\n        }, [] as number[])\n    }\n\n    function buildNextDaysLabels(prediction: number[]) {\n        return _.reduce(prediction, (acc, v, i) => {\n            const latestDate = new Date(_.last(labels) || Date.now());\n            latestDate.setDate(latestDate.getDate() + i + 2);\n            acc[i] = latestDate.toISOString().slice(0, -14);\n            return acc\n        }, [] as string[]);\n    }\n\n    const buildData = () => {\n        const prediction = _.slice(buildPrediction(), 0, days)\n        const predictionLabest = buildNextDaysLabels(prediction)\n        const existingData = _.concat(dataPerCountry.map(x => Number(x)), prediction.map(() => NaN));\n        const predictedData = _.concat(dataPerCountry.map((v, i) => i !== dataPerCountry.length - 1 ? NaN : v), prediction);\n        const labelsNormalized = _.concat(labels, predictionLabest).map(dateFormat);\n        let indexOfFirstPacient = _.findIndex(existingData, (x) => x > 0) - 1\n        indexOfFirstPacient = indexOfFirstPacient < 0 ? 0 : indexOfFirstPacient\n        return {\n            labels: labelsNormalized.slice(indexOfFirstPacient),\n            datasets: [\n                {\n                    ...pastLineStyle,\n                    label: country,\n                    data: existingData.slice(indexOfFirstPacient)\n                },\n                {\n                    ...predictionLineStyle,\n                    label: country + ' (predicted)',\n                    data: predictedData.slice(indexOfFirstPacient)\n                }\n            ]\n        }\n    }\n\n    return <Line data={buildData()} width={100} height={45} legend={null}/>;\n}","import React, {useEffect, useState} from 'react';\nimport Papa, {ParseResult} from 'papaparse';\nimport Chart from \"./Chart\";\nimport {FormControl, Grid, InputLabel, Link, MenuItem, Select, Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport _ from \"lodash\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginLeft: 0,\n            margin: theme.spacing(2),\n            textAlign: 'center'\n        },\n        formControl: {\n            margin: theme.spacing(2),\n            minWidth: 100,\n        },\n        footer: {\n            marginTop: theme.spacing(2),\n        },\n        chart: {\n            width: '95%',\n            height: '95%'\n        }\n    }),\n);\n\nfunction App() {\n    const classes = useStyles();\n    const baseUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-\";\n    const types = {\n        'Confirmed': '#2C98F0',\n        'Deaths': '#FC562E',\n        'Recovered': '#52AF55'\n    };\n    const daysMapping = {\n        'Tomorrow': 1,\n        '2 days': 2,\n        '3 days': 3,\n        '4 days': 4,\n        '5 days': 5,\n        '1 week': 7,\n        '2 weeks': 14,\n        '3 weeks': 21,\n        '1 month': 31\n    }\n\n    const [labels, setLabels] = useState([] as string[]);\n    const [country, setCountry] = useState(\"Italy\");\n    const [dataType, setDataType] = useState(\"Confirmed\");\n    const [countries, setCountries] = useState([] as string[]);\n    const [days, setDays] = useState(1);\n    const [data, setData] = useState([] as any[]);\n\n    const inputCountryLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelCountryWidth, setLabelCountryWidth] = React.useState(0);\n    const inputDaysLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelDaysWidth, setLabelDaysWidth] = React.useState(0);\n    const inputDataTypeLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelDataTypeWidth, setLabelDataTypeWidth] = React.useState(0);\n\n    React.useEffect(() => {\n        setLabelCountryWidth(inputCountryLabel.current!.offsetWidth);\n        setLabelDaysWidth(inputDaysLabel.current!.offsetWidth);\n        setLabelDataTypeWidth(inputDataTypeLabel.current!.offsetWidth);\n    }, []);\n\n    const handleCountryChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setCountry(event.target.value as string);\n    };\n\n    const handleDaysChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setDays(event.target.value as number);\n    };\n\n    const handleDataTypeChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setDataType(event.target.value as string);\n    };\n\n    function processLoadedData(results: ParseResult) {\n        let data = results.data;\n        let labels = _.slice(_.keys(data[0]), 4) as string[]\n        let countries = data.map(row => row['Province/State'].length > 0 ? `${row['Country/Region']}/${row['Province/State']}` : row['Country/Region']);\n        setCountries(countries)\n        setLabels(labels)\n        setData(data)\n    }\n\n    const loadData = () => {\n        Papa.parse(baseUrl + dataType + '.csv', {\n            skipEmptyLines: true, header: true, download: true, delimiter: ',',\n            complete: function (results) {\n                processLoadedData(results);\n            }\n        });\n    }\n\n    useEffect(loadData, [dataType]);\n\n    function getCasesPerCountry(countryToCheck: string) {\n        return _.slice(_.values(_.find(data, row => {\n            let isComplexRegion = _.indexOf(countryToCheck, '/') !== -1;\n            const region = isComplexRegion ? _.split(countryToCheck, '/')[0] : countryToCheck\n            const state = isComplexRegion ? _.split(countryToCheck, '/')[1] : \"\"\n            return row['Country/Region'] === region && row['Province/State'] === state\n        })), 4) as string[];\n    }\n\n    const listOfCountries = _.sortBy(countries);\n\n    function buildCountrySelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputCountryLabel}\n                            id=\"select-country-input-id\">Location</InputLabel>\n                <Select\n                    labelId=\"select-country-select-label\"\n                    id=\"select-country-select-id\"\n                    value={country}\n                    onChange={handleCountryChange}\n                    labelWidth={labelCountryWidth}\n                >\n                    {\n                        listOfCountries.map((country, index) =>\n                            <MenuItem key={index} value={country}>{country}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildDaysSelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputDaysLabel}\n                            id=\"select-days-input-id\">Prediction</InputLabel>\n                <Select\n                    labelId=\"select-days-select-label\"\n                    id=\"select-days-select-id\"\n                    value={days}\n                    onChange={handleDaysChange}\n                    labelWidth={labelDaysWidth}\n                >\n                    {\n                        _.map(daysMapping, (values, key) => <MenuItem key={values}\n                                                                      value={values}>{key}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildTypeSelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputDataTypeLabel}\n                            id=\"select-type-input-id\">Type</InputLabel>\n                <Select\n                    labelId=\"select-type-select-label\"\n                    id=\"select-type-select-id\"\n                    value={dataType}\n                    onChange={handleDataTypeChange}\n                    labelWidth={labelDataTypeWidth}\n                >\n                    {\n                        _.map(_.keys(types), (value, index) => <MenuItem key={index}\n                                                                         value={value}>{value}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildChart() {\n        // @ts-ignore\n        let color = types[dataType];\n        return data.length\n            ? <Chart labels={labels} dataPerCountry={getCasesPerCountry(country)} country={country}\n                     days={days} color={color}/>\n            : '';\n    }\n\n    function getFooter() {\n        return <Typography variant={\"caption\"}>\n            <Link target=\"_blank\" href=\"https://github.com/CSSEGISandData/COVID-19\">\n                Data source\n            </Link>\n            {' | '}\n            <Link target=\"_blank\" href=\"https://t.me/coronavirus_spread\">\n                Feedback\n            </Link>\n            {' | '}\n            <Link target=\"_blank\" href=\"https://github.com/ValeryP/coronavirus-spread\">\n                Github\n            </Link>\n        </Typography>;\n    }\n\n    return (\n        <Grid\n            container direction=\"column\" justify=\"center\" alignItems=\"center\"\n            className={classes.root}>\n            <Grid item>\n                {buildTypeSelect()}\n                {buildCountrySelect()}\n                {buildDaysSelect()}\n            </Grid>\n            <Grid item className={classes.chart}>\n                {buildChart()}\n            </Grid>\n            <Grid item className={classes.footer} >\n                {getFooter()}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\n\nReactGA.initialize(\"UA-160685541-1\");\n\nconst theme = createMuiTheme();\nReactDOM.render(<ThemeProvider theme={theme}><App/></ThemeProvider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}