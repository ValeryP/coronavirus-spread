{"version":3,"sources":["Chart.tsx","App.tsx","index.tsx"],"names":["Chart","labels","dataPerCountry","country","days","color","commonLineStyle","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointBackgroundColor","fill","lineTension","borderCapStyle","borderDashOffset","borderJoinStyle","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointHitRadius","pastLineStyle","borderDash","pointRadius","predictionLineStyle","buildPrediction","dataArray","timeRange","predictionSample","latestDaysNumber","latestDaysCasesNonZero","_","slice","length","filter","x","normailizeLatestDaysNumber","latestDaysCases","mults","map","v","i","multsLatestDays","avgMult","reduce","a","b","range","acc","Math","round","last","data","existingData","Number","prediction","daysNumber","accum","Array","takeRight","predict","console","warn","existingDataNormalized","concat","NaN","predictedDataNormalized","labelsNormalized","startingDay","moment","Date","now","add","toDate","buildNextDaysLabels","date","format","indexOfFirstPacient","findIndex","datasets","label","buildData","width","height","legend","octokit","Octokit","require","useStyles","makeStyles","theme","createStyles","root","marginLeft","margin","spacing","textAlign","formControl","minWidth","footer","marginTop","opacity","latestUpdate","chart","App","classes","types","daysMapping","useCookies","cookies","setCookie","useState","setLabels","setCountry","dataType","setDataType","countries","setCountries","setDays","setData","lastUpdate","setLastUpdate","inputCountryLabel","React","useRef","labelCountryWidth","setLabelCountryWidth","inputDaysLabel","labelDaysWidth","setLabelDaysWidth","inputDataTypeLabel","labelDataTypeWidth","setLabelDataTypeWidth","useEffect","current","offsetWidth","handleCountryChange","event","newCountry","target","value","ReactGA","category","action","path","handleDaysChange","newRange","findKey","handleDataTypeChange","newType","Papa","parse","skipEmptyLines","header","download","delimiter","complete","results","keys","strDate","sortBy","row","repos","listCommits","owner","repo","then","latestCommitTime","values","fromNow","Grid","container","direction","justify","alignItems","className","item","FormControl","variant","InputLabel","ref","id","Select","labelId","onChange","labelWidth","index","MenuItem","key","Typography","countryToCheck","casesSelection","String","sum","find","isComplexRegion","indexOf","region","split","state","getCasesPerCountry","buildChart","OutboundLink","eventLabel","to","initialize","pageview","window","location","pathname","createMuiTheme","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2b9ae56f.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nexport default function Chart({labels, dataPerCountry, country, days, color}: { labels: Date[], dataPerCountry: string[], country: string, days: number, color: string }) {\n    const commonLineStyle = {\n        backgroundColor: color + 'AA',\n        borderColor: color,\n        pointBorderColor: color,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: color + '33',\n        pointBackgroundColor: '#fff',\n        fill: false,\n        lineTension: 0.1,\n        borderCapStyle: 'butt',\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderWidth: 1,\n        pointHoverRadius: 10,\n        pointHoverBorderWidth: 2,\n        pointHitRadius: 10\n    };\n    const pastLineStyle = {...commonLineStyle, borderDash: [], pointRadius: 3};\n    const predictionLineStyle = {\n        ...commonLineStyle,\n        borderDash: [5, 2],\n        pointRadius: 5,\n        backgroundColor: '#000AA',\n        borderColor: '#2196f3',\n        pointBorderColor: '#2196f3',\n        pointHoverBackgroundColor: '#2196f3',\n        pointHoverBorderColor: '#00033'\n    };\n\n    function normailizeLatestDaysNumber(latestDaysNumber: number) {\n        let latestDaysCases = _.slice(dataPerCountry, dataPerCountry.length - latestDaysNumber - 1);\n        const latestDaysCasesNonZero = latestDaysCases.filter(x => x !== \"0\").length\n        return latestDaysCasesNonZero < latestDaysNumber ? latestDaysCasesNonZero - 1 : latestDaysNumber;\n    }\n\n    function buildNextDaysLabels(startingDay: Date | undefined, days: number): Date[] {\n        return _.reduce(_.range(1, +days + +1), (acc, v, i) => {\n            acc[i] = moment(startingDay || Date.now()).add(i + 1, \"days\").toDate();\n            return acc\n        }, [] as Date[]);\n    }\n\n    function buildPrediction(dataArray: number[], timeRange: number, predictionSample: number) {\n        const latestDaysNumber = normailizeLatestDaysNumber(predictionSample)\n        const latestDaysCases = _.slice(dataArray, dataArray.length - latestDaysNumber - 1);\n        const latestDaysDelta = latestDaysCases.map((v, i) => i === 0 ? 0 : v - latestDaysCases[i - 1])\n        const mults = latestDaysDelta.map(((v, i) => 1 + v / latestDaysCases[i]))\n        const multsLatestDays = _.slice(mults, mults.length - latestDaysNumber);\n        const avgMult = (multsLatestDays.reduce((a, b) => a + b, 0) / multsLatestDays.length) || 0;\n        return _.reduce(_.range(1, +timeRange + +1), (acc, v, i) => {\n            acc[i] = Math.round(_.reduce(_.range(0, v), (acc) => acc * avgMult, 1) * (_.last(latestDaysCases) || 0));\n            return acc\n        }, [] as number[])\n    }\n\n    function predict(dataArray: number[], daysNumber: number): number[] {\n        const predictionSampleSize = 3;\n        const accum = Array(daysNumber)\n        for (let i: number = predictionSampleSize; i < dataArray.length - 1; i++) {\n            const prediction = buildPrediction(_.takeRight(dataArray, predictionSampleSize), 1, predictionSampleSize)\n            accum[accum.length] = _.last(prediction)\n        }\n        return accum\n    }\n\n    const buildData = () => {\n        const existingData = dataPerCountry.map(x => Number(x))\n        const prediction = predict(existingData, days)\n        console.warn('xxx - existingData:', existingData)\n        console.warn('xxx - prediction:', prediction)\n        const existingDataNormalized = _.concat(existingData, _.fill(Array(prediction.length - existingData.length), NaN));\n        const predictedDataNormalized = _.concat(_.fill(Array(existingData.length), NaN), prediction);\n        const labelsNormalized = _.concat(labels, buildNextDaysLabels(_.last(labels), prediction.length)).map(date => moment(date).format('ll'));\n        let indexOfFirstPacient = _.findIndex(existingDataNormalized, (x) => x > 0) - 1\n        indexOfFirstPacient = indexOfFirstPacient < 0 ? 0 : indexOfFirstPacient\n        return {\n            labels: labelsNormalized.slice(indexOfFirstPacient),\n            datasets: [\n                {\n                    ...pastLineStyle,\n                    label: country,\n                    data: existingDataNormalized.slice(indexOfFirstPacient)\n                },\n                {\n                    ...predictionLineStyle,\n                    label: country + ' (predicted)',\n                    data: predictedDataNormalized.slice(indexOfFirstPacient)\n                }\n            ]\n        }\n    }\n\n    return <Line data={buildData()} width={100} height={45} legend={null}/>;\n}","import React, {useEffect, useState} from 'react';\nimport Papa from 'papaparse';\nimport Chart from \"./Chart\";\nimport {FormControl, Grid, InputLabel, MenuItem, Select, Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport _ from \"lodash\";\nimport ReactGA from 'react-ga';\nimport moment from \"moment\";\nimport {useCookies} from \"react-cookie\";\n\nconst {Octokit} = require(\"@octokit/rest\");\nconst octokit = new Octokit();\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            marginLeft: 0,\n            margin: theme.spacing(2),\n            textAlign: 'center'\n        },\n        formControl: {\n            margin: theme.spacing(2),\n            minWidth: 100,\n        },\n        footer: {\n            marginTop: theme.spacing(2),\n            opacity: 0.5\n        },\n        latestUpdate: {\n            opacity: 0.5\n        },\n        chart: {\n            width: '90%'\n        }\n    }),\n);\n\nfunction App() {\n    const classes = useStyles();\n    const baseUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-\";\n    const types = {\n        'Confirmed': '#f57c00',\n        'Deaths': '#FC562E',\n        'Recovered': '#388e3c'\n    };\n    const daysMapping = {\n        'Tomorrow': 1,\n        '2 days': 2,\n        '3 days': 3,\n        '1 week': 7\n    }\n    const [cookies, setCookie] = useCookies(['saved-prefs']);\n\n    const [labels, setLabels] = useState([] as Date[]);\n    const [country, setCountry] = useState(cookies['country'] || 'Worldwide');\n    const [dataType, setDataType] = useState(cookies['type'] || 'Confirmed');\n    const [countries, setCountries] = useState([] as string[]);\n    const [days, setDays] = useState(cookies['prediction'] || 1);\n    const [data, setData] = useState([] as any[]);\n    const [lastUpdate, setLastUpdate] = useState('');\n\n    const inputCountryLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelCountryWidth, setLabelCountryWidth] = React.useState(0);\n    const inputDaysLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelDaysWidth, setLabelDaysWidth] = React.useState(0);\n    const inputDataTypeLabel = React.useRef<HTMLLabelElement>(null);\n    const [labelDataTypeWidth, setLabelDataTypeWidth] = React.useState(0);\n\n    React.useEffect(() => {\n        setLabelCountryWidth(inputCountryLabel.current!.offsetWidth);\n        setLabelDaysWidth(inputDaysLabel.current!.offsetWidth);\n        setLabelDataTypeWidth(inputDataTypeLabel.current!.offsetWidth);\n    }, []);\n\n    const handleCountryChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        let newCountry = event.target.value as string;\n        ReactGA.event({\n            category: 'Select',\n            action: 'Country',\n            label: newCountry\n        });\n        setCookie('country', newCountry, {path: '/'});\n        setCountry(newCountry);\n    };\n\n    const handleDaysChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        let newRange = event.target.value as number;\n        ReactGA.event({\n            category: 'Select',\n            action: 'Range',\n            label: _.findKey(newRange)\n        });\n        setCookie('prediction', newRange, {path: '/'});\n        setDays(newRange);\n    };\n\n    const handleDataTypeChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        let newType = event.target.value as string;\n        ReactGA.event({\n            category: 'Select',\n            action: 'Type',\n            label: newType\n        });\n        setCookie('type', newType, {path: '/'});\n        setDataType(newType);\n    };\n\n    const loadData = () => {\n        Papa.parse(baseUrl + dataType + '.csv', {\n            skipEmptyLines: true, header: true, download: true, delimiter: ',',\n            complete: function (results) {\n                let data = results.data;\n                let labels = _.map(_.slice(_.keys(data[0]), 4), (strDate) => moment(strDate).add(1, 'days').toDate())\n                let countries = _.concat(['Worldwide'], _.sortBy(data.map(row => row['Province/State'].length > 0 ? `${row['Country/Region']}/${row['Province/State']}` : row['Country/Region'])));\n                setCountries(countries)\n                setLabels(labels)\n                setData(data)\n            }\n        });\n    }\n\n    const loadLastUpdateTime = () => {\n        octokit.repos.listCommits({\n            owner: 'CSSEGISandData',\n            repo: 'COVID-19'\n        }).then((x: any) => {\n            const latestCommitTime = _.values(x['data'])[0]['commit']['committer']['date']\n            setLastUpdate(moment(latestCommitTime).fromNow());\n        });\n    }\n\n    useEffect(loadData, [dataType]);\n    useEffect(loadLastUpdateTime, []);\n\n    function getCasesPerCountry(countryToCheck: string) {\n        if (countryToCheck === 'Worldwide') {\n            let casesSelection = _.map(data, x => _.slice(_.values(x), 4) as string[]);\n            return _.filter(_.reduce(casesSelection, (acc, value, index) => {\n                acc[index] = String(_.sum(_.map(casesSelection, (row => Number(row[index])))));\n                return acc\n            }, [] as string[]), (value) => Number(value) > 0);\n        } else {\n            return _.slice(_.values(_.find(data, row => {\n                let isComplexRegion = _.indexOf(countryToCheck, '/') !== -1;\n                const region = isComplexRegion ? _.split(countryToCheck, '/')[0] : countryToCheck\n                const state = isComplexRegion ? _.split(countryToCheck, '/')[1] : \"\"\n                return row['Country/Region'] === region && row['Province/State'] === state\n            })), 4) as string[];\n        }\n    }\n\n    function buildTypeSelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputDataTypeLabel}\n                            id=\"select-type-input-id\">Type</InputLabel>\n                <Select\n                    labelId=\"select-type-select-label\"\n                    id=\"select-type-select-id\"\n                    value={dataType}\n                    onChange={handleDataTypeChange}\n                    labelWidth={labelDataTypeWidth}\n                >\n                    {\n                        _.map(_.keys(types), (value, index) => <MenuItem key={index}\n                                                                         value={value}>{value}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildCountrySelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputCountryLabel}\n                            id=\"select-country-input-id\">Location</InputLabel>\n                <Select\n                    labelId=\"select-country-select-label\"\n                    id=\"select-country-select-id\"\n                    value={country}\n                    onChange={handleCountryChange}\n                    labelWidth={labelCountryWidth}\n                >\n                    {\n                        countries.map((country, index) =>\n                            <MenuItem key={index} value={country}>{country}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildDaysSelect() {\n        return <>\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel ref={inputDaysLabel}\n                            id=\"select-days-input-id\">Prediction</InputLabel>\n                <Select\n                    labelId=\"select-days-select-label\"\n                    id=\"select-days-select-id\"\n                    value={days}\n                    onChange={handleDaysChange}\n                    labelWidth={labelDaysWidth}\n                >\n                    {\n                        _.map(daysMapping, (values, key) => <MenuItem key={values}\n                                                                      value={values}>{key}</MenuItem>)\n                    }\n                </Select>\n            </FormControl>\n        </>\n    }\n\n    function buildChart() {\n        // @ts-ignore\n        const color = types[dataType];\n        const dataPerCountry = getCasesPerCountry(country);\n        return data.length\n            ? <Chart labels={labels} dataPerCountry={dataPerCountry} country={country}\n                     days={days} color={color}/>\n            : '';\n    }\n\n    function getFooter() {\n        return <Typography variant={\"caption\"}>\n            <ReactGA.OutboundLink\n                eventLabel=\"Data source\" target=\"_blank\"\n                to=\"https://github.com/CSSEGISandData/COVID-19\">\n                Data source\n            </ReactGA.OutboundLink>\n            {' | '}\n            <ReactGA.OutboundLink\n                eventLabel=\"Feedback\" target=\"_blank\"\n                to=\"https://t.me/coronavirus_spread\">\n                Feedback\n            </ReactGA.OutboundLink>\n            {' | '}\n            <ReactGA.OutboundLink\n                eventLabel=\"Github\" target=\"_blank\"\n                to=\"https://github.com/ValeryP/coronavirus-spread\">\n                Github\n            </ReactGA.OutboundLink>\n        </Typography>;\n    }\n\n    function buildLastUpdateLabel() {\n        return <Typography variant={\"caption\"}>{`Latest update ${lastUpdate}`}</Typography>;\n    }\n\n    return (\n        <Grid\n            container direction=\"column\" justify=\"center\" alignItems=\"center\"\n            className={classes.root}>\n            <Grid item>\n                {buildTypeSelect()}\n                {buildCountrySelect()}\n                {buildDaysSelect()}\n            </Grid>\n            {lastUpdate &&\n            <Grid item className={classes.latestUpdate}>{buildLastUpdateLabel()}</Grid>}\n            <Grid item className={classes.chart}>\n                {buildChart()}\n            </Grid>\n            <Grid item className={classes.footer}>\n                {getFooter()}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\n\nReactGA.initialize(\"UA-160685541-1\");\nReactGA.pageview(window.location.pathname);\n\nconst theme = createMuiTheme();\nReactDOM.render(<ThemeProvider theme={theme}><App/></ThemeProvider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}